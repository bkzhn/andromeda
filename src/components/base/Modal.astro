---
import type { ClassName } from '@/types'

export interface Props {
  id: string
  title: string
  class?: ClassName
}

const { id, title, class: className } = Astro.props
---

<div class:list={['modal', className]} data-component="modal" data-id={id} aria-hidden="true">
  <div tabindex="-1" data-ref="modal:backdrop" class="modal__backdrop">
    <div role="dialog" aria-modal="true" aria-label={title} class="modal__container">
      <slot />
    </div>
  </div>
</div>

<style is:global>
  .modal {
    display: none;

    &.is-open {
      display: block;
    }

    &__backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    &__container {
      background-color: #fff;
      padding: 30px;
      max-width: 500px;
      max-height: 100vh;
      border-radius: 4px;
      overflow-y: auto;
      box-sizing: border-box;
    }

    &[aria-hidden='false'] .modal__backdrop {
      animation: mmfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='false'] .modal__container {
      animation: mmslideIn 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='true'] .modal__backdrop {
      animation: mmfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='true'] .modal__container {
      animation: mmslideOut 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &__container,
    &__backdrop {
      will-change: transform;
    }
  }

  @keyframes modal-fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes modal-fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes modal-slide-in {
    from {
      transform: translateY(15%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes modal-slide-out {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(-10%);
    }
  }
</style>

<script>
  import { Component, initComponent } from '@/helpers/components'
  import { dispatchCustomEvent, listenEvent } from '@/helpers/events'
  import { scrollBehaviour } from '@/helpers/util'

  interface Modal {
    stack: string[]
  }

  class Modal extends Component {
    get defaults() {
      return {
        openClass: 'is-open',
      }
    }

    buildCache() {
      this.stack = []
    }

    bindEvents() {
      listenEvent('modal:show', (event) => {
        this.push(event.detail)
      })

      listenEvent('modal:close', (event) => {
        const id = event.detail

        if (!id) {
          this.pop()
          return
        }

        this.remove(id)
      })

      listenEvent('modal:replace', (event) => {
        this.replace(event.detail)
      })

      const closeButtons = this.getAll('close')
      if (closeButtons) {
        closeButtons.forEach((close) => {
          close.addEventListener('click', () => {
            this.pop()
          })
        })
      }

      // Global event listners for buttons
      document.addEventListener('click', (event) => {
        if (!(event.target instanceof HTMLButtonElement)) return
        if (!event.target.hasAttribute('data-modal-show')) return
        if (!event.target.dataset.modalShow) return
        dispatchCustomEvent('modal:show', event.target.dataset.modalShow)
      })

      document.addEventListener('click', (event) => {
        if (!(event.target instanceof HTMLButtonElement)) return
        if (!event.target.hasAttribute('data-modal-close')) return
        dispatchCustomEvent('modal:close', event.target.dataset.modalClose)
      })
    }

    get peek(): string | undefined {
      return this.stack[this.stack.length - 1]
    }

    get id() {
      return this.element.dataset.id
    }

    push(id: string) {
      this.stack.push(id)
      this.showPeek()
    }

    pop() {
      this.stack.pop()
      this.showPeek()
    }

    replace(id: string) {
      this.stack.pop()
      this.stack.push(id)
      this.showPeek()
    }

    remove(id: string) {
      this.stack = this.stack.filter((modal) => modal !== id)
      this.showPeek()
    }

    showPeek() {
      if (this.peek && this.id && this.peek === this.id) {
        this.show(this.id)
      } else {
        this.close()
      }
    }

    show(id: string) {
      this.element.setAttribute('aria-hidden', 'false')
      this.element.classList.add(this.options.openClass)
      scrollBehaviour('disable')
    }

    close() {
      this.element.setAttribute('aria-hidden', 'true')
      this.element.classList.remove(this.options.openClass)
      scrollBehaviour('enable')
    }
  }

  initComponent('modal', Modal)
</script>
