---
import type { ClassName } from '@/types'

export interface Props {
  id: string
  title: string
  class?: ClassName
}

const { id, title, class: className } = Astro.props
---

<div class:list={['modal', className]} data-component="modal" data-id={id} aria-hidden="true">
  <div tabindex="-1" data-ref="modal:backdrop" class="modal__backdrop">
    <div role="dialog" aria-modal="true" aria-label={title} class="modal__container" data-ref="modal:container">
      <slot />
    </div>
  </div>
</div>

<style is:global>
  .modal {
    display: none;

    &.is-open {
      display: block;
    }

    &__backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    &__container {
    }

    &[aria-hidden='false'] .modal__backdrop {
      animation: modal-fade-in 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='false'] .modal__container {
      animation: modal-slide-in 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='true'] .modal__backdrop {
      animation: modal-fade-out 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &[aria-hidden='true'] .modal__container {
      animation: modal-slide-out 0.3s cubic-bezier(0, 0, 0.2, 1);
    }

    &__container,
    &__backdrop {
      will-change: transform;
    }
  }

  @keyframes modal-fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes modal-fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes modal-slide-in {
    from {
      transform: translateY(15%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes modal-slide-out {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(-10%);
    }
  }
</style>

<script>
  // import { onAnimationEnd } from '@/helpers/animation'
  import { Component, initComponent } from '@/helpers/components'
  import { dispatchCustomEvent, listenEvent } from '@/helpers/events'
  import { scrollBehaviour } from '@/helpers/util'

  function onAnimationEnd(element: HTMLElement, callback: (event: AnimationEvent) => void) {
    return new Promise(function (resolve) {
      function handler(event: AnimationEvent) {
        element.removeEventListener('animationend', handler, false)
        resolve(event)

        if (typeof callback === 'function') {
          callback(event)
        }
      }

      element.addEventListener('animationend', handler, false)
    })
  }

  interface Modal {
    stack: string[]
    container: HTMLElement | null
    backdrop: HTMLElement | null
  }

  class Modal extends Component {
    get defaults() {
      return {
        openClass: 'is-open',
      }
    }

    buildCache() {
      this.container = this.get<HTMLElement>('container')
      this.backdrop = this.get<HTMLElement>('backdrop')
    }

    bindEvents() {
      listenEvent('modal:show', (event) => {
        if (event.detail === this.id) this.show(event.detail)
      })

      listenEvent('modal:close', async () => {
        await this.close()
      })

      if (this.backdrop) {
        this.backdrop.addEventListener('click', (event) => {
          if (event.target === this.backdrop) this.close()
        })
      }
    }

    get id() {
      return this.element.dataset.id
    }

    show(id: string) {
      this.element.setAttribute('aria-hidden', 'false')
      this.element.classList.add(this.options.openClass)
      scrollBehaviour('disable')
    }

    async close() {
      if (this.element.getAttribute('aria-hidden') === 'true') return

      this.element.setAttribute('aria-hidden', 'true')

      if (this.container) {
        await onAnimationEnd(this.container, () => {
          this.element.classList.remove(this.options.openClass)
        })
      }

      scrollBehaviour('enable')
    }
  }

  initComponent('modal', Modal)

  // Global event listners for buttons
  const buttons = Array.from(document.querySelectorAll<HTMLElement>('[data-modal-open], [data-modal-close]'))

  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      if (button.hasAttribute('data-modal-open')) {
        if (!button.dataset.modalOpen) return
        return dispatchCustomEvent('modal:show', button.dataset.modalOpen)
      }

      if (button.hasAttribute('data-modal-close')) {
        return dispatchCustomEvent('modal:close', button.dataset.modalClose)
      }
    })
  })
</script>
