---
import type { ClassName } from '@/types'

const BaseDrawerPosition = {
  left: 'left',
  right: 'right',
  top: 'top',
  bottom: 'bottom',
} as const

export type BaseDrawerPosition = typeof BaseDrawerPosition[keyof typeof BaseDrawerPosition]

export interface Props {
  name: string
  position: BaseDrawerPosition
  class?: ClassName
}

const { position, name, class: className } = Astro.props

const classNames = ['drawer', `drawer--position-${position}`, className]
---

<div class:list={classNames} data-component="drawer" aria-hidden="true" data-id={name}>
  <div class="drawer__backdrop" role="button" z-index="1" data-ref="drawer:backdrop" aria-label="Close this navigation">
    <div
      class="drawer__content"
      data-ref="drawer:backdrop"
      role="dialog"
      aria-modal="true"
      aria-label="Main navigation"
    >
      <slot />
    </div>
  </div>
</div>

<script>
  import { Component, initComponent } from '@/helpers/components'

  import { listenEvent } from '@/helpers/events'

  interface Drawer {
    previousBodyOverflow: string
  }

  class Drawer extends Component {
    get defaults() {
      return {
        expandedClass: 'is-expanded',
      }
    }

    bindEvents() {
      listenEvent('drawer:toggle', (event) => {
        const id = event.detail
        if (id === this.id) this.toggle()
      })

      listenEvent('drawer:collapse', (event) => {
        const id = event.detail
        if (id === this.id) this.collapse()
      })

      listenEvent('drawer:expand', (event) => {
        const id = event.detail
        if (id === this.id) this.expand()
      })

      const backdrop = this.get('backdrop')
      if (backdrop) {
        backdrop.addEventListener('click', (event) => {
          if (event.target === backdrop) {
            this.toggle()
          }
        })
      }
    }

    get id() {
      return this.element.dataset.id
    }

    lockBodyScroll() {
      this.previousBodyOverflow = document.body.style.overflow
      document.body.style.overflow = 'hidden'
    }

    unlockBodyScroll() {
      document.body.style.overflow = this.previousBodyOverflow
    }

    get isExpanded() {
      return this.element.getAttribute('aria-hidden') === 'false'
    }

    expand() {
      this.element.classList.add(this.options.expandedClass)
      this.element.setAttribute('aria-hidden', 'false')
      this.lockBodyScroll()
    }

    collapse() {
      this.element.classList.remove(this.options.expandedClass)
      this.element.setAttribute('aria-hidden', 'true')
      this.unlockBodyScroll()
    }

    toggle() {
      this.isExpanded ? this.collapse() : this.expand()
    }
  }

  initComponent('drawer', Drawer)
</script>

<style is:global>
  .drawer {
    --transform-translate-y: 0;
    --transform-translate-x: 0;

    &__backdrop {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: var(--z-index-backdrop);
      margin: 0;
      background: rgb(0 0 0 / 60%);
      visibility: hidden;
      opacity: 0.5;
      opacity: 0;
      transition: 300ms all cubic-bezier(0.4, 0, 0.2, 1);
      animation: fade-in 300ms cubic-bezier(0, 0, 0.2, 1);
      will-change: opacity;
    }

    &.is-expanded {
      .drawer__backdrop {
        visibility: visible;
        opacity: 1;
      }
    }

    &__content {
      position: fixed;
      top: var(--drawer-offset-top, 0);
      right: var(--drawer-offset-right, 0);
      bottom: var(--drawer-offset-bottom, 0);
      left: var(--drawer-offset-left, 0);
      z-index: var(--z-index-drawer);
      box-sizing: border-box;
      overflow: auto;
      background: #fff;
      transform: translate(var(--transform-translate-x), var(--transform-translate-y));
      transition: 300ms all cubic-bezier(0.4, 0, 0.2, 1);
      -webkit-overflow-scrolling: touch;
      will-change: transform;
    }

    &--position-top {
      --transform-translate-y: -100%;

      .drawer__content {
        bottom: auto;
        width: 100%;
        height: 320px;
      }

      &.is-expanded {
        --transform-translate-y: 0;
      }
    }

    &--position-bottom {
      --transform-translate-y: 100%;

      .drawer__content {
        top: auto;
        width: 100%;
        height: 320px;
      }

      &.is-expanded {
        --transform-translate-y: 0;
      }
    }

    &--position-right {
      --transform-translate-x: 100%;

      .drawer__content {
        left: auto;
        width: 320px;
        height: 100%;
      }

      &.is-expanded {
        --transform-translate-x: 0;
      }
    }

    &--position-left {
      --transform-translate-x: -100%;

      .drawer__content {
        right: auto;
        width: 320px;
        height: 100%;
      }

      &.is-expanded {
        --transform-translate-x: 0;
      }
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
    }

    to {
      opacity: 0;
    }
  }
</style>
